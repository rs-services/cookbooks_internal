Vagrant.configure("2") do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  config.vm.hostname = "rsc-glusterfs-berkshelf"

  # Every Vagrant virtual environment requires a box to build off of.   
  #config.vm.box = "opscode-ubuntu-12.04"
  config.vm.box = "opscode-ubuntu-14.04"
  #config.vm.box ="opscode-centos-6.6"
  #config.vm.box ="opscode-centos-7.0"
  #config.vm.box  ="opscode-debian-7.7"
  
  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  #config.vm.box_url = "http://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_ubuntu-12.04_chef-provisionerless.boxx"
  #config.vm.box_url = "http://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_ubuntu-14.04_chef-provisionerless.box"
  #config.vm.box_url ="http://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_centos-6.6_chef-provisionerless.box"
  #config.vm.box_url="http://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_centos-7.0_chef-provisionerless.box"
  #config.vm.box_url="http://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_debian-7.7_chef-provisionerless.box"
  
  # Assign this VM to a host-only network IP, allowing you to access it
  # via the IP. Host-only networks can talk to the host machine as well as
  # any other machines on the same network, but cannot be accessed (through this
  # network interface) by any external networks.
  #config.vm.network :private_network, ip: "33.33.33.10", auto_config: false

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.

  # config.vm.network :public_network

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider :virtualbox do |vb|
  #   # Don't boot with headless mode
  #   vb.gui = true
  #
  #   # Use VBoxManage to customize the VM. For example to change memory:
  #   vb.customize ["modifyvm", :id, "--memory", "1024"]
  # end
  #
  # View the documentation for the provider you're using for more
  # information on available options.

  config.vm.synced_folder "~/vagrant", "/vagrant", disabled: false
  
  # The path to the Berksfile to use with Vagrant Berkshelf
  # config.berkshelf.berksfile_path = "./Berksfile"

  # Enabling the Berkshelf plugin. To enable this globally, add this configuration
  # option to your ~/.vagrant.d/Vagrantfile file
  config.berkshelf.enabled = true

  # An array of symbols representing groups of cookbook described in the Vagrantfile
  # to exclusively install and copy to Vagrant's shelf.
  # config.berkshelf.only = []

  config.omnibus.chef_version = '11.6.0'

  # An array of symbols representing groups of cookbook described in the Vagrantfile
  # to skip installing and copying to Vagrant's shelf.
  # config.berkshelf.except = []
  config.vm.define :cluster do |master|
    master.vm.network :private_network, ip: "10.0.0.2"

    # This must be unique for tags to work on Vagrant
    master.vm.hostname = "glusterfs-berkshelf-master"
    master.vm.provision :chef_solo do |chef|
      chef.log_level='info'
      chef.json = {
        :cloud => {
          :provider => 'vagrant',
          :private_ips => ['10.0.0.2'],
          :local_ipv4 => '10.0.0.2'
        },
        rightscale: {
          instance_uuid:'abcdef1234',
          servers: {sketchy: {hostname: 'fpp'}}
        },
        glusterfs: {version: '3.5.2'},
       
      }

      chef.run_list = [
        "recipe[apt::default]",
        #"recipe[yum-epel]",
        "recipe[rightscale_tag::default]",
        "recipe[glusterfs::default]",
        "recipe[glusterfs::server_create_cluster]",
        "recipe[glusterfs::server_join_cluster]"
      ]
    end
  end
  config.vm.define :cluster_2 do |master_2|
    master_2.vm.network :private_network, ip: "10.0.0.3"

    # This must be unique for tags to work on Vagrant
    master_2.vm.hostname = "glusterfs-berkshelf-master-2"
    master_2.vm.provision :chef_solo do |chef|
      chef.log_level='info'
      chef.json = {
        :cloud => {
          :provider => 'vagrant',
          :private_ips => ['10.0.0.3'],
          :local_ipv4 => '10.0.0.3'
        },
        rightscale: {
          instance_uuid:'abcdef1236',
          servers: {sketchy: {hostname: 'fpp'}}
        },
        glusterfs: {version: '3.5.2'},
       
      }

      chef.run_list = [
        "recipe[apt::default]",
        #"recipe[yum-epel]",
        "recipe[rightscale_tag::default]",
        "recipe[glusterfs::default]",
       "recipe[glusterfs::server_create_cluster]",
        #"recipe[glusterfs::server_decommission]"
      ]
    end
  end
  config.vm.define :client do |slave| 
    slave.vm.network :private_network, ip: "33.33.33.11"

    # This must be unique for tags to work on Vagrant
    slave.vm.hostname = "glusterfs-berkshelf-client"

    slave.vm.provision :chef_solo do |chef|
      chef.log_level='info'
      chef.json = {
        :vagrant => {
          :box_name => 'glusterfs-client'
        },
        cloud:{
          provider: 'vagrant',
          :private_ips => ['33.33.33.11'],
          :local_ipv4 => '33.33.33.11'
        },
        rightscale: {
          instance_uuid:'abcdef6789',
          servers: {sketchy: {hostname: 'fpp'}}
        },
        glusterfs: {version: '3.5.2',
          client: {mount_point: '/mnt/gluster'},
        },
        
       
      }

      chef.run_list = [
        "recipe[apt::default]",
        #"recipe[yum-epel]",
        "recipe[glusterfs::client_mount_volume]",
      ]
    end
  end
end
